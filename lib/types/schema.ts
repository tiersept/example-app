/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authenticate user and get JWT tokens */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example test@test.test */
                        username: string;
                        /** @example password@123 */
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description JWT access token */
                            token?: string;
                            /** @description JWT refresh token */
                            refreshToken?: string;
                        };
                    };
                };
                /** @description Invalid credentials */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Invalid credentials */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/refresh-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh JWT access token using refresh token */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description JWT refresh token */
                        refreshToken: string;
                    };
                };
            };
            responses: {
                /** @description Token refreshed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description New JWT access token */
                            token?: string;
                            /** @description New JWT refresh token */
                            refreshToken?: string;
                        };
                    };
                };
                /** @description No refresh token provided */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired refresh token */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user accounts with balances */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of user accounts with balances */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1 */
                            id?: number;
                            /** @example 1 */
                            user_id?: number;
                            /** @example Checking */
                            name?: string;
                            /**
                             * Format: float
                             * @example 1950.25
                             */
                            balance?: number;
                        }[];
                    };
                };
                /** @description Unauthorized - No valid token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Invalid token */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user's credit/debit cards */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of user's cards */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1 */
                            id?: number;
                            /** @example 1 */
                            user_id?: number;
                            /** @example 4111111111111111 */
                            number?: string;
                            /** @example 12/26 */
                            expiry?: string;
                            /** @example 123 */
                            cvv?: string;
                        }[];
                    };
                };
                /** @description Unauthorized - No valid token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Invalid token */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user transactions with search, sort, and pagination */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Search term for description or type
                     * @example grocery
                     */
                    search?: string;
                    /**
                     * @description Field to sort by
                     * @example date
                     */
                    sort?: "date" | "amount" | "type" | "description";
                    /**
                     * @description Sort order
                     * @example desc
                     */
                    order?: "asc" | "desc";
                    /**
                     * @description Page number
                     * @example 1
                     */
                    page?: number;
                    /**
                     * @description Number of items per page
                     * @example 10
                     */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of transactions */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1 */
                            id?: number;
                            /** @example 1 */
                            user_id?: number;
                            /** @example 1 */
                            account_id?: number;
                            /**
                             * Format: float
                             * @example -50.25
                             */
                            amount?: number;
                            /** @example debit */
                            type?: string;
                            /** @example Grocery Store */
                            description?: string;
                            /**
                             * Format: date-time
                             * @example 2024-06-01T10:00:00Z
                             */
                            date?: string;
                        }[];
                    };
                };
                /** @description Unauthorized - No valid token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Invalid token */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
